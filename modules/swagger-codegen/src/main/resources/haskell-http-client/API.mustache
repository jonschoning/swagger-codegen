{-|
Module : {{title}}.API
-}

{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE RecordWildCards #-}
{-# OPTIONS_GHC -fno-warn-unused-binds -fno-warn-unused-imports #-}

module {{title}}.API where

import {{title}}.Model

import Control.Monad.IO.Class
import Data.Aeson 
import Data.Aeson.Types 
import Data.Function ((&))
import Data.Text (Text)
import GHC.Exts (IsString(..))

import qualified Data.Map as Map
import qualified Data.Text as T
import qualified Data.Vector as V

import qualified Data.ByteString.Char8 as BS8
import qualified Data.ByteString.Lazy.Char8 as BSL

import           Network.HTTP.Client
import           Network.HTTP.Client.TLS
import qualified Network.HTTP.Types.Method as NHTM

import Prelude 

-- * Operations
{{#apiInfo}}{{#apis}}{{#operations}}

{{#operation}}
-- ** {{operationId}}
-- | {{{vendorExtensions.x-haddockPath}}}
-- {{#summary}}
-- {{{.}}}
-- {{/summary}}{{#notes}}
-- {{{.}}}
-- {{/notes}}{{#hasAuthMethods}}
-- AuthMethod: {{#authMethods}}{{{name}}}{{#hasMore}}, {{/hasMore}}{{/authMethods}}
-- {{/hasAuthMethods}}{{#hasConsumes}}
-- Consumes: {{#consumes}}{{{mediaType}}}{{#hasMore}}, {{/hasMore}}{{/consumes}}
-- {{/hasConsumes}}{{#hasProduces}}
-- Produces: {{#produces}}{{{mediaType}}}{{#hasMore}}, {{/hasMore}}{{/produces}}{{/hasProduces}}
{{operationId}} 
  :: {{#allParams}}{{#required}}{{{dataType}}} -- ^ "{{{paramName}}}"{{#description}} - {{/description}} {{{description}}}
  -> {{/required}}{{/allParams}}{{requestType}} {{{vendorExtensions.x-operationType}}} {{vendorExtensions.x-returnType}}
{{operationId}} {{#allParams}}{{#required}}{{{paramName}}} {{/required}}{{/allParams}}= request
  where
    request = mk{{requestType}} "{{httpMethod}}" url params
    url = [{{#pathParams}}{{#vendorExtensions.x-pathPrefix}}"{{.}}",{{/vendorExtensions.x-pathPrefix}}toPath {{{paramName}}}{{#hasMore}},{{/hasMore}}{{/pathParams}}{{#vendorExtensions.x-pathSuffix}}{{#vendorExtensions.x-hasPathParams}},{{/vendorExtensions.x-hasPathParams}}"{{.}}"{{/vendorExtensions.x-pathSuffix}}]
    params = []{{#isDeprecated}}
{-# DEPRECATED {{operationId}} "" #-}{{/isDeprecated}}

data {{{vendorExtensions.x-operationType}}}{{#vendorExtensions.x-hasOptionalParams}}
{{#allParams}}{{^required}}
{{#description}}-- | /Optional Param/ "{{{baseName}}}" - {{{description}}}{{/description}}
instance HasOptionalParam {{{vendorExtensions.x-operationType}}} {{{vendorExtensions.x-paramNameType}}}
instance ToEncodedParam {{{vendorExtensions.x-paramNameType}}} where
  toEncodedParam = undefined
{{/required}}{{/allParams}}
{{/vendorExtensions.x-hasOptionalParams}}

{{/operation}}
{{/operations}}{{/apis}}{{/apiInfo}}

-- * {{requestType}}
-- | Represents a request. The "req" type variable is the request type. The "res" type variable is the response type.
data {{requestType}} req res = {{requestType}}
  { rMethod  :: NHTM.Method   -- ^ Method of {{requestType}}
  , endpoint :: [Text]     -- ^ Endpoint of {{requestType}}
  , params   :: [EncodedParam] -- ^ Encoded params of {{requestType}}
  }
  deriving (Show)

mk{{requestType}} :: NHTM.Method
                  -> [Text]
                  -> [EncodedParam]
                  -> {{requestType}} req res
mk{{requestType}} m e p = {{requestType}} m e p

-- | Type alias for query parameters
type TupleBS8 = (BS8.ByteString, BS8.ByteString)

-- * Params

-- ** HasOptionalParam
-- | Designates the optional parameters of a request
class (ToEncodedParam param) => HasOptionalParam request param where

-- ** addOptionalParam
-- | Add an optional parameter to a request
addOptionalParam
  :: HasOptionalParam req param
  => {{requestType}} req res -> param -> {{requestType}} req res
addOptionalParam request param =
  request
  { params = toEncodedParam param (params request)
  }

-- ** (-&-)
-- | infix operator \/ alias for 'addOptionalParam'
-- Add an optional parameter to a request
(-&-)
  :: HasOptionalParam req param
  => {{requestType}} req res -> param -> {{requestType}} req res
request -&- param = addOptionalParam request param
{-# INLINE (-&-) #-}
infixl 2 -&-

-- ** ToEncodedParam
-- | Encodes request parameters to their "wire" encoding
class ToEncodedParam param where
  toEncodedParam :: param -> [EncodedParam] -> [EncodedParam]

-- ** EncodedParam
-- | The "wire" encoding of a param
data EncodedParam
  = Query TupleBS8
  | Body BSL.ByteString
  | Header TupleBS8
  deriving (Show)

data ResultFormatType
  = FormatJson
  | FormatXml
  deriving (Show, Eq)

toPath _ = "toPath"

-- * Optional Request Params

{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}{{#vendorExtensions.x-hasOptionalParams}}{{#allParams}}{{^required}}
newtype {{{vendorExtensions.x-paramNameType}}} = {{{vendorExtensions.x-paramNameType}}} { un{{{vendorExtensions.x-paramNameType}}} :: {{{dataType}}} } deriving (Eq, Show, ToJSON, FromJSON){{/required}}{{/allParams}}
{{/vendorExtensions.x-hasOptionalParams}}

{{/operation}}
{{/operations}}{{/apis}}{{/apiInfo}}