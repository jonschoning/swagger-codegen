{-|
Module : {{title}}.API
-}

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE RecordWildCards #-}
{-# OPTIONS_GHC -fno-warn-unused-binds -fno-warn-unused-imports #-}

module {{title}}.API where

import {{title}}.Model

import Control.Monad.IO.Class
import Data.Aeson 
import Data.Aeson.Types 
import Data.Function ((&))
import Data.Text (Text)
import GHC.Exts (IsString(..))

import qualified Data.Map as Map
import qualified Data.Text as T
import qualified Data.Vector as V

import qualified Data.ByteString.Char8 as BS8
import qualified Data.ByteString.Lazy.Char8 as BSL

import           Network.HTTP.Client
import           Network.HTTP.Client.TLS
import qualified Network.HTTP.Types.Method as NHTM

import Prelude 

-- * Operations
{{#apiInfo}}{{#apis}}{{#operations}}

{{#operation}}
-- ** {{operationId}}
-- | {{{vendorExtensions.x-haddockPath}}}
-- {{#summary}}
-- {{{.}}}
-- {{/summary}}{{#notes}}
-- {{{.}}}
-- {{/notes}}{{#hasAuthMethods}}
-- AuthMethod: {{#authMethods}}{{{name}}}{{#hasMore}}, {{/hasMore}}{{/authMethods}}
-- {{/hasAuthMethods}}{{#hasConsumes}}
-- Consumes: {{#consumes}}{{{mediaType}}}{{#hasMore}}, {{/hasMore}}{{/consumes}}
-- {{/hasConsumes}}{{#hasProduces}}
-- Produces: {{#produces}}{{{mediaType}}}{{#hasMore}}, {{/hasMore}}{{/produces}}
-- {{/hasProduces}}{{#vendorExtensions.x-hasOptionalParams}}
-- Optional Params:
-- {{#allParams}}{{^required}}
-- * {{#readOnly}}/ReadOnly/ {{/readOnly}}"{{{baseName}}}" :: '{{dataType}}' {{#description}} - {{{description}}}{{/description}}
-- {{/required}}{{/allParams}}{{/vendorExtensions.x-hasOptionalParams}}
{{operationId}} 
  :: {{#allParams}}{{#required}}{{{dataType}}} -- ^ "{{{paramName}}}"{{#description}} - {{/description}} {{{description}}}
  -> {{/required}}{{/allParams}}{{vendorExtensions.x-returnType}}
{{operationId}} {{#allParams}}{{#required}}{{{paramName}}} {{/required}}{{/allParams}}= undefined
  where
    request = mk{{requestType}} "{{httpMethod}}" url params
    url = [{{#pathParams}}{{#vendorExtensions.x-pathPrefix}}"{{.}}",{{/vendorExtensions.x-pathPrefix}}toPath {{{paramName}}}{{#hasMore}},{{/hasMore}}{{/pathParams}}{{#vendorExtensions.x-pathSuffix}}{{#vendorExtensions.x-hasPathParams}},{{/vendorExtensions.x-hasPathParams}}"{{.}}"{{/vendorExtensions.x-pathSuffix}}]
    params = []{{#isDeprecated}}
{-# DEPRECATED {{operationId}} "" #-}{{/isDeprecated}}

{{/operation}}
{{/operations}}{{/apis}}{{/apiInfo}}

-- * {{requestType}}

data {{requestType}} = {{requestType}}
  { rMethod  :: NHTM.Method   -- ^ Method of {{requestType}}
  , endpoint :: [Text]     -- ^ Endpoint of {{requestType}}
  , params   :: [EncodedParam] -- ^ Encoded params of {{requestType}}
  }
  deriving (Show)

mk{{requestType}} :: NHTM.Method
                  -> [Text]
                  -> [EncodedParam]
                  -> {{requestType}}
mk{{requestType}} m e p = {{requestType}} m e p

-- | Type alias for query parameters
type TupleBS8 = (BS8.ByteString, BS8.ByteString)

-- * EncodedParam

data EncodedParam
  = Query TupleBS8
  | Body BSL.ByteString
  | Header TupleBS8
  deriving (Show)

data ResultFormatType
  = FormatJson
  | FormatXml
  deriving (Show, Eq)

toPath _ = "toPath"
